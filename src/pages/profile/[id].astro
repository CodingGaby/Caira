---
import Continue from "@components/ui/buttons/Continue.astro";
import Form from "@components/ui/forms/Form.astro";
import Input from "@components/ui/forms/Input.astro";
import UserIcon from "@components/ui/icons/UserIcon.astro";
import type { InputFieldArr } from "@customTypes/InputType";
import { db } from "astro:db";
import { eq } from "astro:db";
import { Users } from "astro:db";
import Layout from "src/layouts/Layout.astro";

const { id } = Astro.params;

const session = Astro.cookies.get('userSes')
if (!session) {
	return Astro.redirect('/login');
}
const userId = session?.json().id;

// if (userId !== id) {
//   return new Response(null, {
//     status: 404,
//     statusText: 'Not found'
//   });
// }

// Asegurarse de que el id es del tipo correcto (UUID)
if (typeof id !== "string") {
  throw new Error("El id debe ser una cadena de texto");
}

const user = await db
  .select()
  .from(Users)
  .where(eq(Users.id, id));

const { enrollment, email, passwrd, firstName, lastName, profilePhotoURL } = user[0]

const inputs: InputFieldArr[] = [
	{
		name: "email",
		label: "Email",
		type: "email",
		isRequired: false,
		value: email
	},
	{
		name: "firstName",
		label: "First Name",
		type: "text",
		isRequired: false,
		value: firstName
	},
	{
		name: "lastName",
		label: "Last Name",
		type: "text",
		isRequired: false,
		value: lastName
	},
	{
		name: "passwrd",
		label: "Password",
		type: "text",
		isRequired: false,
		value: passwrd
	},
];
---

<Layout title="Saved">
  <h1 class="mb-8">Edit Profile</h1>
  <div class="flex justify-center">
    <Form btnTitle="Edit">
      <div class="flex justify-center max-w-[450px]">
        <UserIcon photoUrl={profilePhotoURL} idUser={id}/>
      </div>
      <div class="relative my-6 max-w-[450px]">
        <input type="number" id="enrollment" name=enrollment required value={enrollment} readonly class="block px-2.5 pb-2.5 pt-4 w-full text-sm text-gray-900 bg-transparent rounded-lg  border-gray-300 border appearance-none  focus:outline-none focus:ring-0 focus:border-blue-600 peer" />
        <label for="enrollment" class="absolute text-sm text-gray-500 duration-300 transform -translate-y-4 scale-75 top-2 z-10 origin-[0] bg-white px-2 peer-focus:px-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:top-1/2 peer-focus:top-2 peer-focus:scale-75 peer-focus:-translate-y-4 rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto start-1">
          # Enrollment
        </label>
      </div>
      {
        inputs.map((inp) => (
          <Input name={inp.name} type={inp.type} isRequired={false} value={inp.value}>
            {inp.label}
          </Input>
        ))
      }
      <Continue rute="/login" title="Log Out"/>
    </Form>
  </div>
  
</Layout>