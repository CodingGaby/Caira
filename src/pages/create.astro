---
import ArticleForm from "@components/ui/forms/ArticleForm.astro";
import Form from "@components/ui/forms/Form.astro";
import Input from "@components/ui/forms/Input.astro";
import type { InputFieldArr } from "@customTypes/InputType";
import { eq } from "astro:db";
import { db } from "astro:db";
import { Users } from "astro:db";
import { isDbError } from "astro:db";
import { Articles } from "astro:db";
import Layout from "src/layouts/Layout.astro";

const session = Astro.cookies.get('userSes')
if (!session) {
	return Astro.redirect('/login');
}

const userId = session?.json().id;

if (typeof userId !== "string") {
	throw new Error("El id debe ser una cadena de texto");
}


const user = await db
  .select()
  .from(Users)
  .where(eq(Users.id, userId));

const { firstName, lastName } = user[0]

const inputs: InputFieldArr[] = [
	{
		name: "title",
		label: "Title",
		type: "text",
		isRequired: true,
	},
	{
		name: "resume",
		label: "Resume",
		type: "text",
		isRequired: true,
	},
	// editor
];

const publisher = {
  authorsList: [ 
    {
      id: userId,
      name: `${firstName} ${lastName}`
    }
  ]
}

if (Astro.request.method === 'POST') {
	// Analizar datos de formulario
  const formData = await Astro.request.formData();
	
  const title = formData.get('title');
  const resume = formData.get('resume');
  const content = formData.get('editor');
	const id = crypto.randomUUID();
	console.log(content)

	if (typeof title === 'string' && typeof resume === 'string' && typeof content === 'string' &&  typeof id === 'string') {
			// Insert data from the form to the User and upload it to the DB
		try {
			await db.insert(Articles).values({
				id:id,
				title:title,
				resume: resume,
				content: content,
				authors: publisher
			});
		} catch (e) {
			if (isDbError(e)) {
				console.error(`No se puede insertar un usuario con nombre ${title}\n\n${e.message}`);
    	} else {
				console.error('Se ha producido un error inesperado');
			}
		}
	}
	return Astro.redirect("/")
}

---

<Layout title="Create">
  <div class="flex items-center justify-center flex-col mt-10 w-[800px]">
		<h1 class="mb-4">Create an Article</h1>
    <Form btnTitle="Publish">
			{
				inputs.map((inp) => (
					<Input name={inp.name} type={inp.type} isRequired={true} placeholder={inp.placeholder}>
						{inp.label}
					</Input>
				))
			}
			<ArticleForm/>
    </Form>
	</div>
</Layout>